# -*- coding: utf-8 -*-
"""Reading and Writing in CSV Files.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w3qyCSv26-7BETp2zquFzqZY1ODK_ayT
"""

OBJECTIVE:
Introduction to Reading and Writing in CSV files.

CSV:
CSV (Comma Separated Values) format is the most common import and export format for spreadsheets and databases. It is one of the most common methods for exchanging data between applications and popular data format used in Data Science. It is supported by a wide range of applications. A CSV file stores tabular data in which each data field is separated by a delimiter(comma in most cases). To represent a CSV file, it must be saved with the .csv file extension.

Reading from CSV File:
Python contains a module called csv for the handling of CSV files. The reader class from the module is used for reading data from a CSV file. At first, the CSV file is opened using the open() method in 'r' mode(specifies read mode while opening a file) which returns the file object then it is read by using the reader() method of CSV module that returns the reader object that iterates throughout the lines in the specified CSV document.

Syntax for Reading from a CSV File:
csv.reader(csvfile, dialect='excel', **fmtparams)
 
Note: The 'with' keyword is used along with the open() method as it simplifies exception handling and automatically closes the CSV file.

Example used below:
cars.csv - A dataset of about 400 cars with 8 characteristics such as horsepower, acceleration, etc.

import pandas as pd

from google.colab import files
uploaded = files.upload()

import io
df2 = pd.read_csv(io.BytesIO(uploaded['cars.csv']))
# Dataset is now stored in a Pandas Dataframe

print(df2)

import csv 
    
# opening the CSV file 
with open('cars.csv', mode ='r')as file: 
      
  # reading the CSV file 
  csvFile = csv.reader(file) 
    
  # displaying the contents of the CSV file 
  for lines in csvFile: 
        print(lines)

Writing to CSV File:
csv.writer class is used to insert data to the CSV file. This class returns a writer object which is responsible for converting the user data into a delimited string. A CSV file object should be opened with newline=" " otherwise, newline characters inside the quoted fields will not be interpreted correctly.

Syntax for Writing to a CSV File:
csv.writer(csvfile, dialect='excel', **fmtparams)

csv.writer class provides two methods for writing to CSV. They are writerow() and writerows().

- writerow(): This method writes a single row at a time. Field row can be written using this method.
Syntax:
writerow(fields)

- writerows(): This method is used to write multiple rows at a time. This can be used to write rows list.
Syntax:
writerows(rows)

# Python program to demonstrate writing to CSV
  
  
import csv 
    
# field names 
fields = ['Name', 'Branch', 'Year', 'CGPA'] 
    
# data rows of csv file 
rows = [ ['Hritiwik Anshu', 'ENE', '3', '9.0'], 
         ['Agyeya Mishra', 'CE', '3', '9.02'], 
         ['Ayush Ranjan', 'CE', '3', '9.1'], 
         ['Tanmay Raichandani', 'ENE', '3', '9.3'],]

# name of csv file 
filename = "university_records.csv"
    
# writing to csv file 
with open(filename, 'w') as csvfile: 
    # creating a csv writer object 
    csvwriter = csv.writer(csvfile) 
        
    # writing the fields 
    csvwriter.writerow(fields) 
        
    # writing the data rows 
    csvwriter.writerows(rows)

import csv 
    
# opening the CSV file 
with open('university_records.csv', mode ='r')as file: 
      
  # reading the CSV file 
  csvFile = csv.reader(file) 
    
  # displaying the contents of the CSV file 
  for lines in csvFile: 
        print(lines)

We can also write dictionary to the CSV file. For this the CSV module provides the csv.DictWriter class. This class returns a writer object which maps dictionaries onto output rows.

Syntax:
csv.DictWriter(csvfile, fieldnames, restval='', extrasaction='raise', dialect='excel', *args, **kwds)

csv.DictWriter provides two methods for writing to CSV. They are:

- writeheader(): writeheader() method simply writes the first row of your csv file using the pre-specified fieldnames.
Syntax:
writeheader()

- writerows(): writerows method simply writes all the rows but in each row, it writes only the values(not keys).
Syntax:
writerows(mydict)

# my data rows as dictionary objects 
mydict =[{'Branch': 'ENE', 'CGPA': '9.0', 'Name': 'Hritwik Anshu', 'Year': '3'}, 
         {'Branch': 'CE', 'CGPA': '9.02', 'Name': 'Agyeya Mishra', 'Year': '3'},
         {'Branch': 'CE', 'CGPA': '9.1', 'Name': 'Ayush Ranjan', 'Year': '3'},
         {'Branch': 'ENE', 'CGPA': '9.3', 'Name': 'Tanmay Raichandani', 'Year': '3'}] 
    
# field names 
fields = ['Name', 'Branch', 'Year', 'CGPA'] 
    
# name of csv file 
filename = "university_records.csv"
    
# writing to csv file 
with open(filename, 'w') as csvfile: 
    # creating a csv dict writer object 
    writer = csv.DictWriter(csvfile, fieldnames = fields) 
        
    # writing headers (field names) 
    writer.writeheader() 
        
    # writing data rows 
    writer.writerows(mydict)

import csv 
    
# opening the CSV file 
with open('university_records.csv', mode ='r')as file: 
      
  # reading the CSV file 
  csvFile = csv.reader(file) 
    
  # displaying the contents of the CSV file 
  for lines in csvFile: 
        print(lines)
