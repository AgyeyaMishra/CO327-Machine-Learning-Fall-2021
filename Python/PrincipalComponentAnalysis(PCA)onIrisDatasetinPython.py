# -*- coding: utf-8 -*-
"""Principal Component Analysis (PCA) on Iris Dataset in Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gZ5jNtMLUjJG97Dxk6lprWvmiwHb46U3

## Principal Component Analysis (PCA) on Iris Dataset

#### Author - Agyeya Mishra
"""

import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris

iris = load_iris()
#Feature names and Encoding of target variables
print(iris.feature_names)
print(iris.target_names)

data = pd.DataFrame(iris.data)
data.columns = iris.feature_names
data['CLASS'] = iris.target
data.head()

data.info()

data.describe()

x = data.iloc[:,:4]  #features
y = data.iloc[:,4] #target

x.shape, y.shape

from sklearn.decomposition import PCA
pca = PCA()
X = pca.fit_transform(x)

pca.get_covariance()

explained_variance=pca.explained_variance_ratio_
explained_variance

with plt.style.context('dark_background'):
    plt.figure(figsize=(6, 4))
    plt.bar(range(4), explained_variance, alpha=0.5, align='center',
            label='individual explained variance')
    plt.ylabel('Explained variance ratio')
    plt.xlabel('Principal components')
    plt.legend(loc='best')
    plt.tight_layout()

pca = PCA(n_components=3)
X = pca.fit_transform(x)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state=20, stratify=y)

from sklearn.neighbors import KNeighborsClassifier
model = KNeighborsClassifier(7)

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score

cm = confusion_matrix(y_test, y_pred)
print(cm)
print(accuracy_score(y_test, y_pred))
